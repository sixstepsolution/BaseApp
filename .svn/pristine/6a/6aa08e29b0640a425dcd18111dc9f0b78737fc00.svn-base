@model C8.eServices.Mvc.ViewModels.RatesRebateViewModel
@{
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
<h3>Home Owner's Rates Rebate Application for Residential Property</h3>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.RatesRebate.Id, new { id = "ratesRebateId" })

    @Html.HiddenFor(model => model.RatesRebate.DomiciliumId)
    @Html.HiddenFor(model => model.RatesRebate.ExecutorId)
    @Html.HiddenFor(model => model.RatesRebate.ApplicationNumber)
    @Html.HiddenFor(model => model.RatesRebate.StatusId)
    @Html.HiddenFor(model => model.ThirdPartyOwnerCustomerId, new { id = "thirdPartyCustomerId" })
    @Html.HiddenFor(model => model.ApplicantCustomerId, new { id = "applicantCustomerId" })
    @Html.HiddenFor(model => model.OwnerCustomerProfileViewModel.Customer.IsDeceased)
    @Html.HiddenFor(model => model.RatesRebate.CreatedDateTime)
    <hr />

    <div style="display: block;">
        <ol class="progtrckr" data-progtrckr-steps="1">
            <li class="progtrckr-here"><a href="#">Principle Owner</a></li>
            <li class="progtrckr-todo">Properties</li>
            <li class="progtrckr-todo">Accounts</li>
            <li class="progtrckr-todo">Additional Owners</li>
            <li class="progtrckr-todo">Documents</li>
            <li class="progtrckr-todo">Submit</li>
        </ol>
    </div>
    <br />

    @Html.ValidationSummary(true)

    <div class="panel-group" id="instuctions">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 id="instructionsTitle" class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseInstructions">
                        <span class="glyphicon glyphicon-triangle-bottom" aria-hidden="true"></span>
                        Instructions
                    </a>
                </h4>
            </div>
            <div id="collapseInstructions" class="panel-collapse collapse">
                <div class="panel-body">
                    <p>
                        You are currently at step 1:
                        <ol>
                            <li><strong>Principle Owner - Update information about the principle owner.</strong></li>
                            <li>Properties - Update information about the properties owned by the principle owner.</li>
                            <li>Accounts - Update information about the accounts associated with a property.</li>
                            <li>Additional Owners - Update information about the additional owners of a property.</li>
                            <li>Documents - Upload documents to support and verify your application per property.</li>
                            <li>Submit - Submit your application. You may also add additional properties or edit a property and related infomation.</li>
                        </ol>
                    </p>
                    <p>
                        Please use the progress bar above to identify the step you are currently in, also note that steps 2 - 5 are repeated if you
                        have multiple properties. The progress bar will indicate your progress per property and not your overall application.
                    </p>
                    <p>
                        Under the "Applicant Capacity" panel, you may select "In Own Capacity" if you are the principle owner of the property, or you may
                        select "3rd Party" if you are applying on behalf of another person who is the principle owner. When selecting the either option,
                        you will notice that the details change under the "Customer/ Owner Details".
                    </p>
                    <p>
                        Under the "Customer/ Owner Details", if you are the principle owner you should see your details. If your details are not present
                        you will need to create a profile by clicking the "Create" button in the "Customer/ Owner Details" panel. Once you create your
                        profile and have uploaded the relevant documents, you will be brought back to this page.
                    </p>
                    <p>
                        If you are applying on behalf of another owner, you will need to add the customer/ owner details. You may add the customer/ owner by clicking
                        on the "here" link under the "Customer/ Owner Details". Once you create the owners profile and have uploaded the relevant documents, you will
                        be brought back to this page.
                    </p>
                    <p>
                        Under the "Domicilium" panel, you will need to put in your details where you physically can be contacted.
                    </p>
                    <p>
                        If you are applying on behalf of a deceased owner, you will need to fill in the Executor details under the "Executor" panel.
                    </p>

                    <p>
                        Once done all necessary information has been captured:
                        <ul>
                            <li>
                                Complete the reCaptcha by clicking the 'I am not a robot' check box. If you are presented with a puzzle, follow the intructions to complete it.  If you are unsure of how to use the reCaptcha go to this link <a href="https://support.google.com/recaptcha/?hl=en#6081912_" style="font-size: 14px;">https://support.google.com/recaptcha/?hl=en#6081912_</a> and read the instructions under the heading 'Using reCAPTCHA V2'.
                            </li>
                            <li>
                                After successfully completing the reCapture click the "Next" button under the "Navigation" panel.
                            </li>
                        </ul>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="panel-group" id="navigation">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseNavigation">
                        Navigation
                    </a>
                </h4>
            </div>
            <div id="collapseNavigation" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div id="toolbar">
                        <div class="form-inline" role="form">
                            <div class="col-md-6">@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })</div>
                            <div class="col-md-6">
                                <span class="pull-right">
                                    <input type="submit" value="Next" class="btn btn-primary submitButton" id="btnNextButton" />
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel-group" id="thirdPartyPanel">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseThirdPartyPanel">
                        Applicant Capacity
                    </a>
                </h4>
            </div>
            <div id="collapseThirdPartyPanel" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-10">
                            <p>
                                @Html.Label("Are you filling this application: ")&nbsp;

                                @foreach (var ac in Model.ApplicantCapacities)
                                {
                                    @Html.RadioButtonFor(model => model.ApplicantCapacityId, ac.Id, new { id = "applicantCapacity" + ac.Id })
                                    @Html.Raw("&nbsp;" + ac.Label + "&nbsp;&nbsp;")
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel-group" id="customerDetails">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseCustomerDetails">
                        Customer/ Owner Details
                    </a>
                </h4>
            </div>
            <div id="collapseCustomerDetails" class="panel-collapse collapse in">
                <div class="panel-body">
                    @if (Model.CurrentCustomerProfileViewModel.Customer == null)
                    {
                        <div>
                            <p>Please create a profile first. A profile holds all your contact details. If you are applying for a "3rd Party", you will need to create your own profile first then the "3rd Party".</p>
                            @Html.EncodedActionLink("Create", "ManageProfile", "Profile", new { agentId = 0, customerId = 0, viewId = 4 }, new { @class = "btn btn-primary" })
                        </div>
                    }
                    else
                    {
                        <div id="ownCapacity">
                            @Html.Partial("~/Views/Shared/_CustomerPartial.cshtml", Model.CurrentCustomerProfileViewModel)
                        </div>
                        <div id="thirdParty" style="display: none;">
                            <div class="form-group" id="thirdPartyProfile">
                                @*If you are applying on behalf of another owner, you will need to add the customer/ owner details.*@
                                @Html.LabelFor(model => model.CurrentCustomerProfileViewModel.Customers, new { @class = "control-label col-md-1 col-md-offset-1" })
                                <div class="col-md-3">
                                    @if (Model.IsAgent)
                                    {
                                        @*@Html.DropDownListFor(model => model.ThirdPartyOwnerCustomerId, new SelectList(Model.CurrentCustomerProfileViewModel.Customers, "Id", "FullName"), "Please select a customer...", new { id = "AgentCustomers" })*@
                                        @Html.DropDownList("AngentCustomerId", new SelectList(Model.CurrentCustomerProfileViewModel.Customers.ToList(), "Id", "FullName"), "Please select a customer...", new { id = "AgentCustomers", @class = "form-control", @style = "margin-top:-10px;" })

                                        @Html.ValidationMessageFor(model => model.ThirdPartyOwnerCustomerId)
                                    }
                                </div>
                                <div class="col-md-3">
                                    Click @Html.EncodedActionLink("here", "ManageProfile", "Profile", new { agentId = Model.CurrentCustomerProfileViewModel.Agent != null ? Model.CurrentCustomerProfileViewModel.Agent.Id : (int?)null, customerId = 0, viewId = 2 }, null) to add a Customer/ Owner.
                                </div>
                            </div>
                            <br /><br />
                            @if (Model.ThirdPartyOwnerCustomerId != null && Model.ThirdPartyOwnerCustomerId > 0)
                            {
                                @Html.Partial("~/Views/Shared/_CustomerPartial.cshtml", Model.OwnerCustomerProfileViewModel)
                            }
                            <div id="renderCustomerView"></div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="form-horizontal">
        <div class="panel-group" id="domicilium">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapseDomicilium">
                            Domicilium
                        </a>
                    </h4>
                </div>
                <div id="collapseDomicilium" class="panel-collapse collapse in">
                    <div class="panel-body">
                        <div class="form-group">
                            &nbsp;
                            <div class="col-md-10">
                                <p>Physical address where you agree to accept service of legal document and processes (P.O. Box/ Private Bag/ Cluster Box/ Foreign address will <b>NOT BE ACCEPTED</b>).</p>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsDomiciliumSameAsPhysicalAddress, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.CheckBoxFor(model => model.IsDomiciliumSameAsPhysicalAddress, new { id = "isDomiciliumSameAsPhysicalAddress" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Domicilium.Address1, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Domicilium.Address1, new { @class = "form-control", id = "domiciliumAddress1" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Domicilium.Address1)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Domicilium.Address2, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Domicilium.Address2, new { @class = "form-control", id = "domiciliumAddress2" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Domicilium.Address2)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Domicilium.Address3, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Domicilium.Address3, new { @class = "form-control", id = "domiciliumAddress3", @required = true })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Domicilium.Address3)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Domicilium.Address4, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Domicilium.Address4, new { @class = "form-control", id = "domiciliumAddress4", @required = true })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Domicilium.Address4)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Domicilium.Address5, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Domicilium.Address5, new { @class = "form-control", id = "domiciliumAddress5", @required = true })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Domicilium.Address5)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Domicilium.AddressCode, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Domicilium.AddressCode, new { @class = "form-control", id = "domiciliumAddressCode", pattern = @"\d{4}", @title = "Postal address code. should contain numbers only with a length of 4. e.g. 4000", @placeholder = "4000", @maxlength = 4, @required = true })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Domicilium.AddressCode)
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <div class="panel-group" id="executor" style="display: none;">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapseExecutor">
                            Executor
                        </a>
                    </h4>
                </div>
                <div id="collapseExecutor" class="panel-collapse collapse in">
                    <div class="panel-body">
                        <div class="form-group">
                            &nbsp;
                            <div class="col-md-10">
                                If the owner is deceased, please enter the executor details below. An executor is responsible for executing, or following through, on behalf of the deceased.
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IsExecutorSameAsApplicant, "Are you the executor?", new { @class = "control-label col-md-2" })

                            <div class="col-md-5">
                                @Html.CheckBoxFor(model => model.IsExecutorSameAsApplicant, new { id = "isExecutorSameAsApplicant", title = "Check if the executor is the same as the applicant" })
                                Same as applicant
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.FirstName, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.FirstName, new { @class = "form-control", id = "executorFirstName" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.FirstName)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.LastName, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.LastName, new { @class = "form-control", id = "executorLastName" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.LastName)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.ContactNumber, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.ContactNumber, new { @class = "form-control", id = "executorContactNumber", @pattern = @"^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$", @title = "Contact number. should contain numbers only with a length of 10 e.g. 0812345690", @placeholder = "0810000000", maxlength = 10 })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.ContactNumber)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.EmailAddress, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.EmailAddress, new { @class = "form-control", id = "executorEmailAddress" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.EmailAddress)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.PostalAddress1, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.PostalAddress1, new { @class = "form-control", id = "executorPostalAddress1" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.PostalAddress1)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.PostalAddress2, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.PostalAddress2, new { @class = "form-control", id = "executorPostalAddress2" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.PostalAddress2)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.PostalAddress3, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.PostalAddress3, new { @class = "form-control", id = "executorPostalAddress3" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.PostalAddress3)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.PostalAddress4, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.PostalAddress4, new { @class = "form-control", id = "executorPostalAddress4" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.PostalAddress4)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.PostalAddress5, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.PostalAddress5, new { @class = "form-control", id = "executorPostalAddress5" })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.PostalAddress5)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RatesRebate.Executor.PostalAddressCode, new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.RatesRebate.Executor.PostalAddressCode, new { @class = "form-control", id = "executorPostalAddressCode", pattern = @"\d{4}", @title = "Postal address code. should contain numbers only with a length of 4. e.g. 4000", @placeholder = "4000", @maxlength = 4 })
                                @Html.ValidationMessageFor(model => model.RatesRebate.Executor.PostalAddressCode)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel-group" id="navigation2">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseNavigation2">
                        Navigation
                    </a>
                </h4>
            </div>
            <div id="collapseNavigation2" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div id="toolbar2">
                        <div class="form-inline" role="form">
                            <div class="col-md-6">@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })</div>
                            <div class="col-md-6">
                                <span class="pull-right">
                                    <input id="btnNextBottomButton" type="submit" class="btn btn-primary submitButton" value="Next" />
                                    @*<input id="btnNextBottomButton" data-toggle="tooltip" data-placement="auto" title="If you are applying on behalf of another owner, you will need to add the customer/ owner details." type="submit" class="btn btn-primary" value="Next" />*@
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    //Uncomment when going LIVE
    @*<div id="reCaptcha">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-4" style="float:right">
                    <div class="g-recaptcha" data-sitekey="6Ld0PAgUAAAAAGB3JFTS8PFWgo1AqLOrMyroBJP3" data-callback="validateCaptcha"></div>
                </div>
            </div>
        </div>*@

}

@section Scripts {

    @*@Scripts.Render("~/bundles/jqueryvalidate")*@
}
<script src="https://www.google.com/recaptcha/api.js?hl=en" async defer></script>

<script type="text/javascript">
    //Proceed to next step only if captcha response is valid or when modifying existing application
    @*var ratesRebate = @Html.Raw(Json.Encode(Model.RatesRebate));

        if (ratesRebate.Id > 0) {
            $("#btnNextBottomButton").prop('disabled', false);
            $("#btnNextButton").prop('disabled', false);

           // $("#reCaptcha").hide();
        } else {
            $("#btnNextBottomButton").prop('disabled', true);
            $("#btnNextButton").prop('disabled', true);

           // $("#reCaptcha").show();
        }

        function validateCaptcha(response) {

            if (response.length == 0) {
                $("#btnNextBottomButton").prop('disabled', true);
                $("#btnNextButton").prop('disabled', true);
            } else {
                $("#btnNextBottomButton").prop('disabled', false);
                $("#btnNextButton").prop('disabled', false);
            }

        }*@

    function toggleExecutorValidation(isRequired) {

        $("#executorFirstName").prop("required", isRequired);
        $("#executorLastName").prop("required", isRequired);
        $("#executorContactNumber").prop("required", isRequired);
        $("#executorEmailAddress").prop("required", isRequired);
        $("#executorPostalAddress3").prop("required", isRequired);
        $("#executorPostalAddress4").prop("required", isRequired);
        $("#executorPostalAddress5").prop("required", isRequired);
        $("#executorPostalAddressCode").prop("required", isRequired);
    }

    $("#saveNextButton").prop("disabled", false);
    $("#saveNextBottomButton").prop("disabled", false);

    $(document).ready(function() {
        // NB: If you see an error line in visual studio, do not try to correct it. the semi-colon is in the Html.Raw code.
        var thirdPartyCustomerId = @Html.Raw(String.Format("{0};", Model.ThirdPartyOwnerCustomerId ?? 0))
        var thirdPartyIsDeceased = @Html.Raw(String.Format("{0};", Model.OwnerCustomerProfileViewModel.Customer.IsDeceased ?? false)).ToString().ToLower()
        var isOwnCapacity = false;
        var applicantCustomerId = $("#applicantCustomerId").val();
        var ratesRebateId = $("#ratesRebateId").val();




        function validateCapacity(thirdPartycustomerId, rebateId) {
            if (rebateId != 0) {
                if ($("#applicantCapacity1").prop("checked") == true) {

                    $("#applicantCapacity2").click(function() {
                        return false;
                    });
                } else if (thirdPartycustomerId == 0) {
                    $("#applicantCapacity1").click(function() {
                        return true;
                    });
                } else {
                    $("#applicantCapacity1").click(function() {
                        return false;
                    });
                }
            }
        }

        @*// Displays a triangle to tell users if the panel is collapsable.*@
        $('#instructionsTitle').on("click", function() {
            var span = $('#instructionsTitle').find('span');
            if (span.attr('class') === 'glyphicon glyphicon-triangle-top') {
                span.removeClass('glyphicon-triangle-top');
                span.addClass('glyphicon-triangle-bottom');
            } else {
                span.removeClass('glyphicon-triangle-bottom');
                span.addClass('glyphicon-triangle-top');
            }
        });

        function validateRrApplication(applicantId) {
            if (applicantId == '') {
                $("#domicilium").hide();
            }
            if (applicantId != '' && ($("#thirdPartyCustomerId").val() == '' || $("#thirdPartyCustomerId").val() ==0 )) {
                $("#domicilium").show();
            } else {
                $("#domicilium").hide();
            }
        }


        // Get agent customer's Id
        $("#AgentCustomers").on('change', function() {
            var valueSelected = this.value;

            if (valueSelected > 0) {
                $("#saveNextButton").prop("disabled", false);
                $("#saveNextBottomButton").prop("disabled", false);
                thirdPartyCustomerId = valueSelected;

                if (thirdPartyCustomerId > 0) {
                    $("#domicilium").show();
                } else {
                    $("#domicilium").hide();
                }
                // Render the customer details.
                $.ajax({
                    url: '@Url.Action("RenderCustomer", "Profile")',
                    type: "POST",
                    data: JSON.stringify({ 'Id': $(this).val() }),
                    dataType: "json",
                    traditional: true,
                    contentType: "application/json; charset=uft-8",
                    success: function(data) {
                        if (data.status == "Success") {
                            $('#renderCustomerView').html($.parseHTML(data.view));
                        } else {
                            alert("Error1");
                        }
                    },
                    error: function() {
                        alert("Error2");
                    }
                });
            }
        });


        // Add change event.
        $("#applicantCapacity1, #applicantCapacity2").change(function() {

            if ($("#applicantCapacity1").prop("checked") == true) {

                isOwnCapacity = true;
                $("#ownCapacity").show();
                $("#thirdParty").hide();
                $('#executor').hide();
                $("#domicilium").show();
                $('#saveNextBottomButton').tooltip('hide');
                toggleExecutorValidation(false);

                if ($("#applicantCustomerId").val() == '') {
                    $("#domicilium").hide();
                    $('.submitButton').prop("disabled", true);
                } else {
                    $("#domicilium").show();
                    $('.submitButton').prop("disabled", false);
                }

                // Validates application capacity
                validateCapacity(thirdPartyCustomerId, ratesRebateId);
                //validateRrApplication(applicantCustomerId);

            } else {

                isOwnCapacity = false;

                $("#ownCapacity").hide();
                $("#thirdParty").show();

                if (thirdPartyCustomerId == 0 || thirdPartyCustomerId == '') {
                    $("#domicilium").hide();
                    @*//$("#applicantCapacity1").prop("disabled", false);*@
                } else {
                    $("#domicilium").show();
                    @*//$("#applicantCapacity1").prop("disabled", true);*@
                }
                if (thirdPartyIsDeceased) {
                    $('#executor').show();

                    toggleExecutorValidation(true);
                } else {
                    $('#executor').hide();

                    toggleExecutorValidation(false);
                }

                if ($("#thirdPartyCustomerId").val() == '' || $("#thirdPartyCustomerId").val() == 0) {
                    $('.submitButton').prop("disabled", true);
                    $("#domicilium").hide();

                    //bootbox.alert("If you are applying on behalf of another owner, you will need to add the customer/ owner details.");
                } else {
                    $('.submitButton').prop("disabled", false);
                    $("#domicilium").show();
                }

                @*// Validates application capacity*@
                validateCapacity(thirdPartyCustomerId, ratesRebateId);
                @*// validateRrApplication(applicantCustomerId);*@
            }

            if ($("#isDomiciliumSameAsPhysicalAddress").is(":checked")) $("#isDomiciliumSameAsPhysicalAddress").trigger('change');
        });

        @*// Defaults the radio button.*@
        $("#applicantCapacity1").prop("checked", true).trigger("change");
        @*// Trigger change is third party customer.*@
        if (thirdPartyCustomerId > 0) {
            $("#applicantCapacity2").prop("checked", true).trigger("change");
            $("#thirdPartyProfile").hide();
        }


        @*// Use the same address as the applicant.*@
        $('#isDomiciliumSameAsPhysicalAddress').change(function() {
            if ($(this).is(':checked')) {
                if (isOwnCapacity == true) {
                    $('#domiciliumAddress1').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PhysicalAddress1 : "")');
                    $('#domiciliumAddress2').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PhysicalAddress2 : "")');
                    $('#domiciliumAddress3').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PhysicalAddress3 : "")');
                    $('#domiciliumAddress4').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PhysicalAddress4 : "")');
                    $('#domiciliumAddress5').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PhysicalAddress5 : "")');
                    $('#domiciliumAddressCode').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PhysicalAddressCode.ToString() : "")');
                } else if (thirdPartyCustomerId > 0) {
                    @*// Get agent customer details*@
                    $.ajax({
                        url: '@Url.Action("GetCustomer", "Profile")',
                        type: "POST",
                        data: JSON.stringify({ 'id': thirdPartyCustomerId }),
                        dataType: "json",
                        traditional: true,
                        contentType: "application/json; charset=uft-8",
                        success: function(data) {
                            var json = data;
                            $('#domiciliumAddress1').val(json.PhysicalAddress1 != null ? json.PhysicalAddress1 : "");
                            $('#domiciliumAddress2').val(json.PhysicalAddress2 != null ? json.PhysicalAddress2 : "");
                            $('#domiciliumAddress3').val(json.PhysicalAddress3 != null ? json.PhysicalAddress3 : "");
                            $('#domiciliumAddress4').val(json.PhysicalAddress4 != null ? json.PhysicalAddress4 : "");
                            $('#domiciliumAddress5').val(json.PhysicalAddress5 != null ? json.PhysicalAddress5 : "");
                            $('#domiciliumAddressCode').val(json.PhysicalAddressCode != null ? json.PhysicalAddressCode : "");
                        },
                        error: function() {
                            alert("Error2");
                        }
                    });


                } else {
                    $('#domiciliumAddress1').val('@Html.Raw(Model.OwnerCustomerProfileViewModel.Customer != null ? Model.OwnerCustomerProfileViewModel.Customer.PhysicalAddress1 : "")');
                    $('#domiciliumAddress2').val('@Html.Raw(Model.OwnerCustomerProfileViewModel.Customer != null ? Model.OwnerCustomerProfileViewModel.Customer.PhysicalAddress2 : "")');
                    $('#domiciliumAddress3').val('@Html.Raw(Model.OwnerCustomerProfileViewModel.Customer != null ? Model.OwnerCustomerProfileViewModel.Customer.PhysicalAddress3 : "")');
                    $('#domiciliumAddress4').val('@Html.Raw(Model.OwnerCustomerProfileViewModel.Customer != null ? Model.OwnerCustomerProfileViewModel.Customer.PhysicalAddress4 : "")');
                    $('#domiciliumAddress5').val('@Html.Raw(Model.OwnerCustomerProfileViewModel.Customer != null ? Model.OwnerCustomerProfileViewModel.Customer.PhysicalAddress5 : "")');
                    $('#domiciliumAddressCode').val('@Html.Raw(Model.OwnerCustomerProfileViewModel.Customer != null ? Model.OwnerCustomerProfileViewModel.Customer.PhysicalAddressCode.ToString() : "")');
                }
            } else {
                $('#domiciliumAddress1').val('');
                $('#domiciliumAddress2').val('');
                $('#domiciliumAddress3').val('');
                $('#domiciliumAddress4').val('');
                $('#domiciliumAddress5').val('');
                $('#domiciliumAddressCode').val('');
            }
        });

        @*// Use the same details as the applicant.*@
        $('#isExecutorSameAsApplicant').change(function() {
            if ($(this).is(':checked')) {
                $('#executorFirstName').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.FirstName : "")');
                $('#executorLastName').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.LastName : "")');
                $('#executorContactNumber').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.CellPhoneNumber : "")');
                $('#executorEmailAddress').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.EmailAddress : "")');
                $('#executorPostalAddress1').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PostalAddress1 : "")');
                $('#executorPostalAddress2').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PostalAddress2 : "")');
                $('#executorPostalAddress3').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PostalAddress3 : "")');
                $('#executorPostalAddress4').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PostalAddress4 : "")');
                $('#executorPostalAddress5').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PostalAddress5 : "")');
                $('#executorPostalAddressCode').val('@Html.Raw(Model.CurrentCustomerProfileViewModel.Customer != null ? Model.CurrentCustomerProfileViewModel.Customer.PostalAddressCode.ToString() : "")');
            } else {
                $('#executorFirstName').val('');
                $('#executorLastName').val('');
                $('#executorContactNumber').val('');
                $('#executorEmailAddress').val('');
                $('#executorPostalAddress1').val('');
                $('#executorPostalAddress2').val('');
                $('#executorPostalAddress3').val('');
                $('#executorPostalAddress4').val('');
                $('#executorPostalAddress5').val('');
                $('#executorPostalAddressCode').val('');
            }
        });

        @*// Render the customer details.*@
        $('#ThirdPartyOwnerCustomerId').change(function() {
            $.ajax({
                url: '@Url.Action("RenderCustomer", "Profile")',
                type: "POST",
                data: JSON.stringify({ 'Id': $(this).val() }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=uft-8",
                success: function(data) {
                    if (data.status == "Success") {
                        $('#renderCustomerView').html($.parseHTML(data.view));
                    } else {
                        alert("Error1");
                    }
                },
                error: function() {
                    alert("Error2");
                }
            });
        });
    });

</script>
