using System;
using System.Data.Entity;
using System.Globalization;
using System.Linq;
using System.Web.Mvc;
using C8.eServices.Mvc.ApiServices;
using C8.eServices.Mvc.DataAccessLayer;
using C8.eServices.Mvc.Helpers;
using C8.eServices.Mvc.Keys;
using C8.eServices.Mvc.Models;

namespace C8.eServices.Mvc.Controllers
{
    public class HomeController : Controller
    {

        #region Home Index
        //
        // GET: /Home/
        public ActionResult Index()
        {
            try
            {
                Session["payments"] = null;

                // Test code.
                //This is not needed
                //var ca = CustomerAccountApi.GetAccounts("6911305037089");
                //EmailHelper client = new EmailHelper();
                //client.Recipient = "jayan.kistasami@calc8.co.za";
                //client.Subject = "Test " + DateTime.Now.ToString();
                //client.Body = "the quick brown fox.";
                //client.SendEmail();

                //using (var cxt = new eServicesDbContext())
                //{
                //    var ca = cxt.CustomerAccounts.FirstOrDefault(o => o.AccountNo == 1800678685);
                //    System.Diagnostics.Debug.WriteLine(ca.IDNo);
                //}                             

                // Used to display an update message for eservices.
                using (var cxt = new eServicesDbContext())
                {
                    //var ban = new BankAccount() { BankAccountNumber = "62099807411" };
                    //System.Diagnostics.Debug.WriteLine(ban.BankAccountNumber + Environment.NewLine + ban.HiddenBankAccountNumber);

                    //ban = cxt.BankAccounts.First();
                    //System.Diagnostics.Debug.WriteLine(ban.BankAccountNumber + Environment.NewLine + ban.HiddenBankAccountNumber);

                    var eServicesUpdate = cxt.AppSettings.FirstOrDefault(a => a.Key == AppSettingKeys.UpdateNotification);
                    if (eServicesUpdate == null) throw new Exception("Invalid appsetting");

                    ViewBag.ShowUpdate = eServicesUpdate.IsActive;
                    ViewBag.UpdateMessage = eServicesUpdate.Value;
                    ViewBag.UpdateTime = eServicesUpdate.ModifiedDateTime?.ToString("yyyy/MM/dd HH:mm") ?? DateTime.Now.ToString("yyyy/MM/dd HH:mm");
                    return View();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion


        #region FAQ Index
        public ActionResult FAQ()
        {
            return View();
        }
        #endregion


        #region Home Index2
        public ActionResult Index2()
        {
            ViewBag.Status = "Email address activated";
            return View("Index");
        }

   
        #endregion

        #region Intro Index
        public ActionResult Introduction()
        {
            return View();
        }
        #endregion


        #region RightsandUsage Index
        public ActionResult RightsandUsage()
        {
            return View();
        }
        #endregion

        #region UsernamePassword Index
        public ActionResult UsernamePassword()
        {
            return View();
        }
        #endregion


        #region InforandPrivacy Index
        public ActionResult InfoandPrivacy()
        {
            return View();
        }
        #endregion

        #region Unavailability Index
        public ActionResult Unavailability()
        {
            return View();
        }
        #endregion
        #region Comming Soon
        public ActionResult UnderConstructionComingSoon()
        {
            return View();
        }
        #endregion

    }
}
