@model C8.eServices.Mvc.ViewModels.IncentivePolicyApplicationViewModel
@{
    ViewBag.Title = "Apply";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}


    <div class="page-header">
        <h3 align="center">
            Economic Development Incentive Policy Application <br />Financial Incentives
        </h3>
    </div>
   
   @using (Html.BeginForm("Create", "IncentivePolicy", FormMethod.Post, new { id = "createIncentiveForm" }))
   {
        <div style="display: block;">
            <ol class="progtrckr" data-progtrckr-steps="1">
                <li class="progtrckr-here"><a href="#">Application Details</a></li>
                <li class="progtrckr-todo">Additional Contacts</li>
                <li class="progtrckr-todo">Supporting Document(s)</li>
            </ol>
        </div>
        <br />
        <div class="panel-group" id="navigation1">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">
                        <a data-toggle="collapse" data-parent="#accordion" href="#collapseNavigation2">
                            Navigation
                        </a>
                    </h4>
                </div>
                <div id="collapseNavigation1" class="panel-collapse collapse in">
                    <div class="panel-body">
                        <div id="toolbar1">
                            <div class="form-inline" role="form">
                                <div class="col-md-6">@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })</div>
                                <div class="col-md-6">
                                    <span class="pull-right">
                                        <input id="btnNextButton" type="submit" class="btn btn-primary submitButton" value="Next" />
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="panel panel-default">
            <div class="panel-heading">Customer Information</div>
            <div class="panel-body">
                <div class="panel-body">
                    @Html.Partial("~/Views/Shared/_CustomerPartial.cshtml", Model.Customer)
                </div>
            </div>
        </div>

        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.PropertyInvestment.IncentivePolicyProperty.PropertyId, new { id = "objProperty" })
        @Html.HiddenFor(m => m.IncentivePolicy.IndustryId, new { id = "industryId" })
        @Html.HiddenFor(m => m.ApplicantCustomerId)
        @Html.HiddenFor(m => m.IncentivePolicy.Id)
        @Html.HiddenFor(m => m.IncentivePolicy.StatusId)
        @Html.HiddenFor(m => m.IncentivePolicy.IsActive)
        @Html.HiddenFor(m => m.IncentivePolicy.IsDeleted)
        @Html.HiddenFor(m => m.IncentivePolicy.ApplicationNumber)
        @Html.HiddenFor(m => m.PropertyInvestment.Id)
        @Html.HiddenFor(m => m.PropertyInvestment.IncentivePolicyPropertyId)

        <div class="form-horizontal">
            <div class="panel panel-default">
                <div class="panel-heading">Nature Of Investment </div>
                <div class="panel-body">
                    <div class="panel-body">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Property, "Municipal Property Rates No.", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-3">
                                <input type="text" class="form-control" name="ratesNumber" id="RatesNumber" required="required" />
                            </div>
                            <input type="button" class="btn btn-primary btn-sm" value="Verify Property" name="btnVerify" id="btnVerify">
                            <strong>@Html.Label("propAdd", new { id = "propAdd", style = "display: none;" })</strong>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.IncentivePolicy.CategoryTypeId, "Category of Incentive", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.IncentivePolicy.CategoryTypeId, (SelectList)ViewBag.CategoryTypeId, "--- Select Category---", new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.IncentivePolicy.CategoryTypeId)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.IncentivePolicy.IndustryId, "Industry Sector", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                <button type="button" class="btn btn-primary" id="viewIndustry">Choose</button>
                                <strong>@Html.Label("industryDesc", new { id = "industryDesc", style = "display: none;" })</strong>
                            </div>
                            @*<div class="col-md-3">
                                    @Html.DropDownListFor(model => model.SelectedFocusAreaId, (SelectList)ViewBag.FocusAreaId, "--- Select Focus Area ---", new { @class = "form-control", id = "focusAreaList", required = "required" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.SelectedSubSectorId, (SelectList)ViewBag.SubSectorId, "--- Select SubSector ---", new { @class = "form-control", id = "subSectorList", required = "required" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.IncentivePolicy.IndustryId, (SelectList)ViewBag.IndustryId, "--- Select Industry ---", new { @class = "form-control", id = "industryList", required = "required" })
                                </div>*@
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PropertyInvestment.VatNumber, new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.VatNumber, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.VatNumber)
                            </div>
                            @Html.LabelFor(model => model.PropertyInvestment.TaxNumber, new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.TaxNumber, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.TaxNumber)
                            </div>
                        </div>
                        <div class="form-group textareaContent">
                            @Html.LabelFor(model => model.PropertyInvestment.InvestmentDescription, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.PropertyInvestment.InvestmentDescription, new { @class = "form-control textarea", rows = 6 })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.InvestmentDescription)
                            </div>
                        </div>
                        <div class="form-group textareaContent">
                            @Html.LabelFor(model => model.PropertyInvestment.TypeOfServices, "Please provide full description of the type of manufacturing or industrial product or services", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.PropertyInvestment.TypeOfServices, new { @class = "form-control textarea", rows = 5 })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.TypeOfServices)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PropertyInvestment.BbbeeStatus, "BBBEE Status", new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.BbbeeStatus, new { @class = "form-control" })
                                <h4 class="small">(points as per DTI BBBEE scorecard)</h4>
                            </div>
                            @Html.LabelFor(model => model.PropertyInvestment.SupplierNumber, "eThekwini Municipality supplier No.", new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.SupplierNumber, new { @class = "form-control" })
                                <h4 class="small">(where applicable)</h4>
                            </div>
                            @Html.LabelFor(model => model.PropertyInvestment.SicCode, "Standard Industrial Classification", new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.SicCode, new { @class = "form-control" })
                                <h4 class="small">SIC code (where applicable)</h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-horizontal">
            <div class="panel panel-default">
                <div class="panel-heading">Investment Details</div>
                <div class="panel-body">
                    <div class="panel-body">
                        <h6 style="color:red">NB: Rates will move back to normal rates if the development has not been completed within the specified timeframe.</h6>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PropertyInvestment.DevelopmentPeriod, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.DevelopmentPeriod, new { @class = "form-control", placeholder = "e.g 2 years 8 months", required = "required" })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.DevelopmentPeriod)
                            </div>
                            @Html.LabelFor(model => model.PropertyInvestment.ProjectedStartDateTime, "Projected Start Date", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.ProjectedStartDateTime, new { @class = "form-control datePicker", id = "ProjectedStartDateTime", required = "required" })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.ProjectedStartDateTime)
                            </div>
                            @Html.LabelFor(model => model.PropertyInvestment.ProjectedEndDateTime, "Projected End Date", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.PropertyInvestment.ProjectedEndDateTime, new { @class = "form-control datePicker", id = "ProjectedEndDateTime", required = "required" })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.ProjectedEndDateTime)
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.LandSize, "Land Size", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.LandSize, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.LandSize)
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(model => model.LandSizeUnitofMeasure, (SelectList)ViewBag.UnitofMeasure, "Unit of Measure", new { @class = "form-control", required = "required" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.BuildingSize, "Building Size", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.BuildingSize, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.BuildingSize)
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(model => model.BuildingSizeUnitofMeasure, (SelectList)ViewBag.UnitofMeasure, "Unit of Measure", new { @class = "form-control", required = "required" })
                            </div>
                        </div>
                        <div class="form-group">
                            <h6 class="col-md-offset-1 col-md-10" style="font-weight: bold;text-decoration: underline;">Percentage of operational expenditure (of Rand value) procured from:</h6>
                            @Html.LabelFor(model => model.BuildingSize, "Outside RSA (%)", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.OperationalExpanditureForeign, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OperationalExpanditureForeign)
                            </div>
                            @Html.LabelFor(model => model.BuildingSize, "Inside RSA: outside eThekwini (%)", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.OperationalExpanditureOutBound, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OperationalExpanditureOutBound)
                            </div>
                            @Html.LabelFor(model => model.BuildingSize, "Inside RSA: within eThekwini (%)", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-2">
                                @Html.TextBoxFor(model => model.OperationalExpanditureInBound, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OperationalExpanditureInBound)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-horizontal">
            <div class="panel panel-default">
                <div class="panel-heading">Value Of Investment </div>
                <div class="panel-body">
                    <div class="panel-body">
                        <table class="table table-bordered">
                            <colgroup span="2"></colgroup>
                            <colgroup span="2"></colgroup>
                            <tr>
                                <td rowspan="2"></td>
                                <th rowspan="2">Capital expenditure <br /> (Rand value)</th>
                                <th colspan="2" scope="colgroup" style="text-align:center">Number of jobs to be created</th>
                            </tr>
                            <tr>
                                <th scope="col">Permanent</th>
                                <th scope="col">Temporary</th>
                            </tr>
                            <tr>
                                <th scope="row" class="required">Year 1</th>
                                <td>
                                    @Html.TextBoxFor(model => model.CapitalExpenditureYear1, new { @class = "form-control appendToCapitalSum ", @style = "width:200px", required = "required" })
                                    @Html.ValidationMessageFor(model => model.CapitalExpenditureYear1, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.PermanentJobsYear1, new { @class = "form-control appendToPJobsSum required", @style = "width:200px", required = "required" })
                                    @Html.ValidationMessageFor(model => model.PermanentJobsYear1, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.TempJobsYear1, new { @class = "form-control appendToTJobsSum required", @style = "width:200px", required = "required" })
                                    @Html.ValidationMessageFor(model => model.TempJobsYear1, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Year 2</th>
                                <td>
                                    @Html.TextBoxFor(model => model.CapitalExpenditureYear2, new { @class = "form-control appendToCapitalSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.CapitalExpenditureYear2, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.PermanentJobsYear2, new { @class = "form-control appendToPJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.PermanentJobsYear2, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.TempJobsYear2, new { @class = "form-control appendToTJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.TempJobsYear2, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Year 3</th>
                                <td>
                                    @Html.TextBoxFor(model => model.CapitalExpenditureYear3, new { @class = "form-control appendToCapitalSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.CapitalExpenditureYear3, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.PermanentJobsYear3, new { @class = "form-control appendToPJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.PermanentJobsYear3, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.TempJobsYear3, new { @class = "form-control appendToTJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.TempJobsYear3, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Year 4</th>
                                <td>
                                    @Html.TextBoxFor(model => model.CapitalExpenditureYear4, new { @class = "form-control appendToCapitalSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.CapitalExpenditureYear4, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.PermanentJobsYear4, new { @class = "form-control appendToPJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.PermanentJobsYear4, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.TempJobsYear4, new { @class = "form-control appendToTJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.TempJobsYear4, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Year 5</th>
                                <td>
                                    @Html.TextBoxFor(model => model.CapitalExpenditureYear5, new { @class = "form-control appendToCapitalSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.CapitalExpenditureYear5, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.PermanentJobsYear5, new { @class = "form-control appendToPJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.PermanentJobsYear5, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.TempJobsYear5, new { @class = "form-control appendToTJobsSum", @style = "width:200px" })
                                    @Html.ValidationMessageFor(model => model.TempJobsYear5, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Total</th>
                                <td>
                                    @Html.TextBoxFor(model => model.CapitalExpenditureTotal, new { @class = "form-control", @style = "width:200px", id = "capitalTotal", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.CapitalExpenditureTotal, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.PermanentJobsTotal, new { @class = "form-control", @style = "width:200px", id = "perTotal", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.PermanentJobsTotal, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.TempJobsTotal, new { @class = "form-control", @style = "width:200px", id = "tempTotal", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.TempJobsTotal, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                        </table>
                        <div class="form-group form-inline">
                            @Html.Label("Has the applicant previously benefitted, or currently benefitting, from other investment incentive programmes within eThekwini Municipality", new { @class = "control-label col-md-6 required" })
                            <div class="col-md-4 button-group">
                                <input type="radio" name="option" id="radio1" value="yes"> Yes
                                <input type="radio" name="option" id="radio2" value="no"> No
                                <h6>If Yes, please specify</h6>
                            </div>
                        </div>
                        @*<div id="benefitsGrp" style="display: none;">*@ 
                            <div class="form-group textareaContent" > 
                                <div class="col-md-12">
                                    @Html.TextAreaFor(model => model.PropertyInvestment.IncentiveProgrammeCurrentBenefits, new { @class = "form-control textarea", rows = 5 })
                                    @Html.ValidationMessageFor(model => model.PropertyInvestment.IncentiveProgrammeCurrentBenefits)
                                </div>
                            </div>
                        @*</div>*@
                        <div class="form-group textareaContent">
                            @Html.LabelFor(model => model.PropertyInvestment.InvestmentDescription, "What positive impacts wil the investment have on skills development and training", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.PropertyInvestment.ImpactOnSkillDevelopment, new { @class = "form-control textarea", rows = 5 })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.ImpactOnSkillDevelopment)
                            </div>
                        </div>
                        <div class="form-group textareaContent">
                            @Html.LabelFor(model => model.PropertyInvestment.InvestmentDescription, "Please list any support services you may require from eThekwini Municipality E.g. Revenue Clearance Certificates", new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.PropertyInvestment.SupportServices, new { @class = "form-control textarea",  rows=6 })
                                @Html.ValidationMessageFor(model => model.PropertyInvestment.SupportServices)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-group" id="navigation2">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapseNavigation2">
                                Navigation
                            </a>
                        </h4>
                    </div>
                    <div id="collapseNavigation2" class="panel-collapse collapse in">
                        <div class="panel-body">
                            <div id="toolbar2">
                                <div class="form-inline" role="form">
                                    <div class="col-md-6">@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-primary" })</div>
                                    <div class="col-md-6">
                                        <span class="pull-right">
                                            <input id="btnNextBottomButton" type="submit" class="btn btn-primary submitButton" value="Next" />
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    }

    @*Sector Industry Modal*@
    <div class="modal fade" id="industryModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Industry Sector Selection</h4>
                </div>
                <div class="modal-body" style="overflow: auto;height:600px">
                    <table id="IndustryGrid" class="table table-bordered"
                           width="100%" data-height="500"
                           data-search="true"
                           data-pagination="true"
                           data-page-list="[10, 25, 50, 100, ALL]">
                        <thead>
                        <tr>
                            <th>Focus Area Id</th>
                            <th>
                                Focus Area
                            </th>
                            <th>
                                Sub Sector
                            </th>
                            <th>
                                Industry
                            </th>
                            <th> </th>
                        </tr>
                        </thead>
                        <tbody></tbody>
                        <tfoot>
                        <input type="button" value="Ok" id="btnChooseIndustry" class="btn btn-primary"/>
                           &nbsp; <Label style="color: red;font-style:italic">NB: Only one option from the table can be chosen</Label>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
        @*}*@
    </div>
    @section Scripts{
        <script src="@Url.Content("~/scripts/Datatables/jquery.dataTables.min.js")"></script>
        <script src="@Url.Content("~/scripts/Datatables/dataTables.bootstrap.js")"></script>
        <script src="@Url.Content("~/scripts/jquery.datetimepicker.js")"></script>
        <script type="text/javascript">

            var oTable;
            var today = new Date();
            var day = ("0" + today.getDate()).slice(-2);
            var month = ("0" + (today.getMonth() + 1)).slice(-2);
            var year = today.getFullYear();

            $(document).ready(function() {

                var incentivePolicyId = '@Model.IncentivePolicyId',
                    isModelValid = '@ViewBag.IsModelValid',
                    option = '@ViewBag.Option';

                if (option === 'yes') {
                    $("#benefitsGrp").show();
                    $("#benefitsGrp").prop("required", true);
                    $("#radio1").attr('checked', true);

                } else {
                    $("#benefitsGrp").hide();
                    $("#benefitsGrp").prop("required", false);
                    $("#radio2").attr('checked', true);
                }
                var fullAddress = '@Model.PropertyFullAddress';
                var ratesNumber = '@Model.PropertyRatesNumber';
                var industry = '@Model.IndustrySector';

                if (incentivePolicyId > 0 || isModelValid === 'False') {
                    $("#RatesNumber").val(ratesNumber);
                    $("#propAdd").html('Address: ' + fullAddress);
                    $("#propAdd").show();

                    $("#industryDesc").html(industry);
                    $("#industryDesc").show();

                    $("#RatesNumber").attr('readonly', true);
                    $("#btnVerify").attr('disabled', 'disabled');

                } else {
                    $("#RatesNumber").removeAttr('readonly');
                    $("#btnVerify").removeAttr('disabled');

                    $("#propAdd").html('');
                    $("#propAdd").hide();
                }

                $('.textareaContent').on('change keyup keydown paste cut', 'textarea', function() {
                    $(this).height(50).height(this.scrollHeight);
                }).find('textarea').change();

                $('#focusAreaList').on('change', function() {
                    getFocusAreaSubSector();
                });

                $('#subSectorList').on('change', function() {
                    getSubSectorIndustries();
                });

                $('input[type=radio]').change(function() {
                    var value = $('input[name=option]:checked').val();
                    if (value === 'yes') {
                        $("#benefitsGrp").show();
                        $("#benefitsGrp").attr('required', true);
                    } else {
                        $("#benefitsGrp").hide();
                        $("#benefitsGrp").attr('required', false);
                    }
                });

                // Verify Property Against VA
                $("#btnVerify").click(function() {
                    var ratesNumber = $("#RatesNumber").val();
                    $.ajax({
                        type: 'GET',
                        url: "@Url.Action("GetVaProperty", "Property")",
                        data: { ratesNumber: ratesNumber },
                        cache: false,
                        success: function(result) {

                            if (result.errorMsg != '' && result.property != null) {
                                bootbox.confirm({
                                    title: "Information",
                                    message: result.errorMsg,
                                    buttons: {
                                        cancel: {
                                            label: '<i class="fa fa-times"></i> Cancel'
                                        },
                                        confirm: {
                                            label: '<i class="fa fa-check"></i> Edit Application'
                                        }
                                    },
                                    callback: function(result) {
                                        if (result) {
                                            // Get Application Reference
                                            $.ajax({
                                                type: "GET",
                                                url: "@Url.Action("GetIncentivePolicyApplicationByPropertyRef", "IncentivePolicy")",
                                                data: ({ ratesNumber: ratesNumber }),
                                                success: function(result) {
                                                    //Edit Application
                                                    window.location = '@Url.Action("Create", "IncentivePolicy")/' + '?q=' + result.data;
                                                }
                                            });
                                        }
                                    }
                                });
                            } else if (result.errorMsg != '' && result.property == null) {
                                bootbox.alert(result.errorMsg);
                            } else {
                                $("#propAdd").html('Address: ' + result.property.PropertyFullAddress);
                                $("#propAdd").show();

                                $("#objProperty").val(result.property.Id);
                            }

                        },
                        error: function(err) {
                            console.log(err);
                        }
                    });
                });

                //Validates date picker
                var date = new Date();
                date.setDate(date.getDate() + 1);

                //$("#ProjectedStartDateTime").datepicker({
                //    format: 'yyyy-mm-dd',
                //    startDate: date,
                //    timepicker: false
                //});
                //$("#ProjectedEndDateTime").datepicker({
                //    format: 'yyyy-mm-dd',
                //    startDate: date,
                //    timepicker: false
                //});
                $('#ProjectedStartDateTime').datetimepicker({
                    format: 'Y/m/d',
                    timepicker: false,
                    scrollInput: false,
                    value: '2016/09/07',
                    onShow: function(ct) {
                        this.setOptions({
                            maxDate: false
                        });
                    }
                });

                $('#ProjectedEndDateTime').datetimepicker({
                    format: 'Y/m/d',
                    timepicker: false,
                    scrollInput: false,
                    value: year + "/" + month + "/" + day,
                    onShow: function(ct) {
                        this.setOptions({
                            minDate: jQuery('#ProjectedStartDateTime').val() ? jQuery('#ProjectedStartDateTime').val() : false
                        });
                    }
                });
                ///
                oTable = $('#IndustryGrid').DataTable({
                    searching: false,
                    paging: false,
                    "ajax": {
                        "url": "@Url.Action("LoadIndustrySectors", "IncentivePolicy")",
                        "type": "GET",
                        "datatype": "json",
                        "scrollY": "200px",
                        "overflow": "auto"
                    },
                    "columns": [
                        {
                            "data": "FocusAreaId"
                        },
                        {
                            "data": "FocusArea",
                            "width": "30%"
                        },
                        { "data": "SubSector", "width": "30%" },
                        { "data": "Industry", "width": "30%" },
                        {
                            "data": "Id",
                            "title": "Select",
                            "render": function(data, type, row) {
                                return '<input type="radio" name="industryOption" value="' + data + '">';
                            },
                            "autoWidth": true
                        }
                    ],
                    "columnDefs": [
                       {
                           "targets": [ 0 ],
                           "visible": false,
                           "searchable": false
                       }],
                    "order": [[0, 'asc']],
                    "displayLength": 30,
                    "drawCallback": function(settings) {
                        mergCells1();
                        mergCells();

                        //  var api = this.api();
                        //  var rows = api.rows({ page: 'current' }).nodes();
                        //  var last = null;
                        ////  var currentTd = $(this).find('td:nth-child(' + columnNumberToMerge + ')');
                        //  console.log(api.rows({ page: 'current' }).data());
                        //  api.column(0, { page: 'current' }).data().each(function (group, i) {
                        //      if (last !== group) {
                        //          $(rows).eq(i).before(
                        //              '<tr class="group"><td colspan="5">' + group + '</td></tr>'
                        //          );
                        //          last = group;
                        //      }
                        //  });

                        //api.column(1, { page: 'current' }).data().each(function (group, i) {
                        //    if (last !== group) {
                        //        $(rows).eq(i).before(
                        //            '<tr class="group"><td colspan="4">' + group + '</td></tr>'
                        //        );
                        //        last = group;
                        //    }
                        //});
                    }
                });

                // Order by the grouping
                //$('#IndustryGrid tbody').on('click', 'tr.group', function () {
                //    var currentOrder = table.order()[0];
                //    if (currentOrder[0] === 2 && currentOrder[1] === 'asc') {
                //        table.order([2, 'desc']).draw();
                //    } else {
                //        table.order([2, 'asc']).draw();
                //    }
                //});

                $("#btnChooseIndustry").on('click', function() {
                    var value = $('input[name=industryOption]:checked').val();
                    console.log(value);

                    try {
                        $.ajax({
                            type: 'GET',
                            url: "@Url.Action("GetIndustry", "Industry")",
                            data: { industryId: value },
                            dataType: 'json',
                            traditional: true,
                            success: function(result) {

                                $("#industryDesc").html(result.data.IndustrySector);
                                $("#industryDesc").show();

                                $("#industryId").val(result.data.Id);
                                $('#industryModal').modal('hide');
                            },
                            error: function(response) {
                                console.log(response.result);
                            }
                        });
                    } catch (ex) {
                        console.log(ex);
                    }
                });

                //Ensures the context of text area fits
                $(".textarea").each(function () {
                    do_resize(this);
                });

                //iterate through each textboxes and add keyup
                //handler to trigger sum event
                $(".appendToCapitalSum").each(function() {
                    $(this).keyup(function() {
                        calculateSum(".appendToCapitalSum", "#capitalTotal");
                    });
                });
                $(".appendToPJobsSum").each(function() {
                    $(this).keyup(function() {
                        calculateSum(".appendToPJobsSum", "#perTotal");
                    });
                });
                $(".appendToTJobsSum").each(function() {
                    $(this).keyup(function() {
                        calculateSum(".appendToTJobsSum", "#tempTotal");
                    });
                });
            });

            $('#viewIndustry').on('click', function() {
                $('#industryModal').modal('show');
            });

            function calculateSum(className, totalIdx) {
                var sum = 0;
                //iterate through each textboxes and add the values
                $(className).each(function() {
                    //add only if the value is number
                    if (!isNaN(this.value) && this.value.length != 0) {
                        sum += parseFloat(this.value);
                    }
                });

                //if (className === ".appendToCapitalSum") {
                //    //.toFixed() method will roundoff the final sum to 2 decimal places
                //    $(totalIdx).val(sum.toFixed(2));
                //} else {
                //    $(totalIdx).val(sum);
                //}
                $(totalIdx).val(sum);
            }

            function do_resize(textarea) {

                var maxrows = 5;
                var txt = textarea.value;
                var cols = textarea.cols;

                var arraytxt = txt.split('\n');
                var rows = arraytxt.length;

                for (var i = 0; i < arraytxt.length; i++)
                    rows += parseInt(arraytxt[i].length / cols);

                if (rows > maxrows) textarea.rows = maxrows;
                else textarea.rows = rows;
            }

            function mergCells() {
                $('#IndustryGrid').each(function() {
                    var columnNumberToMerge = 1,
                        columnNumberToMerge2 = 2;
                    @*// Previous_td holds the first instance of same td. Initially first td=null.**@
                    var previousTd = null,
                        previousTd2 = null;


                    var i = 1;
                    $("tbody", this).find('tr').each(function() {
                        @*// find the correct td of the correct column*@
                        @*// we are considering the table column 1, You can apply on any table column*@
                        var currentTd = $(this).find('td:nth-child(' + columnNumberToMerge + ')');
                        var currentTd2 = $(this).find('td:nth-child(' + columnNumberToMerge2 + ')');

                        if (previousTd == null) {
                            @*// for first row*@
                            previousTd = currentTd;
                            //previousTd2 = currentTd2;
                            i = 1;
                        } else if (currentTd.text() === previousTd.text()) {
                            @*// the current td is identical to the previous row td*@
                            @*// remove the current td*@
                            currentTd.remove();
                            //if (currentTd2.text() === previousTd2.text()) {
                            //    currentTd2.remove();
                            //    previousTd2.attr('rowspan', i + 1);
                            //}


                            @*// increment the rowspan attribute of the first row td instance*@
                            previousTd.attr('rowspan', i + 1);

                            i = i + 1;
                        } else {
                            @*// means new value found in current td. So initialize counter variable i*@
                            previousTd = currentTd;
                            //if (currentTd2.text() !== previousTd2.text()) {
                            //    previousTd2 = currentTd2;
                            //}
                            i = 1;
                        }
                    });
                });

            }

            function mergCells1() {
                $('#IndustryGrid').each(function() {
                    var columnNumberToMerge = 2;
                    @*// Previous_td holds the first instance of same td. Initially first td=null.**@
                    var previousTd = null;


                    var i = 1;
                    $("tbody", this).find('tr').each(function() {
                        @*// find the correct td of the correct column*@
                        @*// we are considering the table column 1, You can apply on any table column*@
                        var currentTd = $(this).find('td:nth-child(' + columnNumberToMerge + ')');

                        if (previousTd == null) {
                            @*// for first row*@
                            previousTd = currentTd;
                            i = 1;
                        } else if (currentTd.text() === previousTd.text()) {
                            @*// the current td is identical to the previous row td*@
                            @*// remove the current td*@
                            currentTd.remove();
                            @*// increment the rowspan attribute of the first row td instance*@
                            previousTd.attr('rowspan', i + 1);

                            i = i + 1;
                        } else {
                            @*// means new value found in current td. So initialize counter variable i*@
                            previousTd = currentTd;
                            i = 1;
                        }
                    });
                });

            }

            function getFocusAreaSubSector() {
                // Filter Sub Sectors based on selected Focus Area
                var selectedOption = $('#focusAreaList').val();
                try {
                    $.ajax({
                        type: 'GET',
                        url: "@Url.Action("GetFocusAreaSubSectors", "FocusArea")",
                        data: { focusAreaId: selectedOption },
                        dataType: 'json',
                        traditional: true,
                        success: function(data) {

                            var $select = $("#subSectorList");
                            $select.empty();

                            var newOption = $('<option>--- Select SubSector ---</option>');
                            $select.append(newOption);

                            $(data.rows).each(function() {
                                $("<option />", {
                                    val: this.value,
                                    text: this.text
                                }).appendTo($select);
                            });
                        },
                        error: function(response) {
                            console.log(response.result);
                        }
                    });


                } catch (ex) {
                    console.log(ex);
                }
            }


            function getSubSectorIndustries() {
                // Filter Industries based on selected Sub Sector
                var selectedOption = $('#subSectorList').val();
                try {
                    $.ajax({
                        type: 'GET',
                        url: "@Url.Action("GetSubSectorIndustries", "FocusArea")",
                        data: { subSectorId: selectedOption },
                        dataType: 'json',
                        traditional: true,
                        success: function(data) {
                            var $select = $("#industryList");
                            $select.empty();

                            var newOption = $('<option>--- Select Industry ---</option>');
                            $select.append(newOption);

                            $(data.rows).each(function() {
                                $("<option />", {
                                    val: this.value,
                                    text: this.text
                                }).appendTo($select);
                            });
                        },
                        error: function(response) {
                            console.log(response.result);
                        }
                    });


                } catch (ex) {
                    console.log(ex);
                }
            }

        </script>
    }
